//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.17

use super::sea_orm_active_enums::DateDurationType;
use super::sea_orm_active_enums::FeedDurationType;
use super::sea_orm_active_enums::PetSexType;
use super::sea_orm_active_enums::PetSpeciesType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "pets")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub user_id: i32,
    pub name: String,
    pub sex: PetSexType,
    pub species: PetSpeciesType,
    pub birthday: Date,
    pub birthday_precision: DateDurationType,
    pub feed_count: Option<i32>,
    pub feed_count_per: Option<FeedDurationType>,
    #[sea_orm(column_type = "Float", nullable)]
    pub weight: Option<f32>,
    pub is_disabled: bool,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::feed_records::Entity")]
    FeedRecords,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Users,
    #[sea_orm(has_many = "super::work_goals::Entity")]
    WorkGoals,
    #[sea_orm(has_many = "super::work_records::Entity")]
    WorkRecords,
}

impl Related<super::feed_records::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FeedRecords.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::work_goals::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WorkGoals.def()
    }
}

impl Related<super::work_records::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WorkRecords.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
